// Code generated by kurento-go-generator. DO NOT EDIT.

package {{ .Package }}

{{ $name := .Name}}

{{/* Generate interface then struct */}}
{{ if ne .Name "MediaObject" }}
type I{{ .Name }} interface {
	{{ range .Methods }}{{.Name | title }}(context.Context{{ if .Params }}, *{{$name}}{{ .Name | title }}Params{{ end }})({{ if .Return.type}}{{.Return.type}},{{end}} error)
	{{end}}
}
{{ end }}

{{ .Doc }}
type {{ .Name }} struct {
	{{if eq .Name "MediaObject"}}connection *kurento.Client{{else}}{{ prefixType $.Package .Extends }}{{end}}
	{{ range .Properties }}
	{{ .doc }}
	{{ .name | title }} {{ prefixType $.Package .type }}
	{{ end }}
}

type {{.Name}}_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	{{ range .Constructor.Params }}{{ .name | title }} {{ prefixType $.Package .type }}
	{{ end }}
}

func ({{.Name}}_builder) GetTypeName() string {
	return "{{.Name}}"
}

{{ if eq .Name "MediaPipeline" }}
// NewMediaPipeline creates a new MediaPipeline object on the Kurento server.
// All other media objects are created as descendents of MediaPipeline objects,
// but there needs to be an explicit way to create the top-level MediaPipeline.
func NewMediaPipeline(ctx context.Context, connection *kurento.Client) (*MediaPipeline, error) {
	elem := &MediaObject{}
	elem.setConnection(connection)
	mp := &MediaPipeline{}
	err := elem.Create(ctx, mp, &MediaPipeline_builder{})
	return mp, err
}
{{ end }}

{{ range .Methods }}
type {{$name}}{{ .Name | title }}Params struct {
	{{ range $i, $e := .Params }}{{ $e.name | title }} {{ checkElement $.Package $e.type }} `json:"{{ $e.name | title }}"`
	{{ end }}
}

func ({{$name}}{{ .Name | title }}Params) OperationName() string {
	return "{{ .Name }}"
}

{{ .Doc }}{{ if .Return.doc }}
// Returns:
{{ .Return.doc }}{{ end }}
func (elem *{{$name}}) {{ .Name | title }}(ctx context.Context {{ if .Params }}, params *{{$name}}{{ .Name | title }}Params{{ end }}) ({{if .Return.type }}{{ .Return.type }}, {{ end }} error) {
	request := kurento.BuildInvoke(elem.Id, {{ if .Params }}params{{ else }}&{{$name}}{{ .Name | title }}Params{}{{ end }})

	{{ if .Return}}
	{{ .Return.doc }}
	value, err := kurento.CallSimple[{{ .Return.type }}](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err
	{{ else }}
	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil
	{{end}}

}
{{ end }}
