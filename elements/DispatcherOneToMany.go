// Code generated by kurento-go-generator. DO NOT EDIT.

package elements

import (
	"context"
	"fmt"

	"github.com/safermobility/kurento-go-next/v6"
	"github.com/safermobility/kurento-go-next/v6/core"
)

type IDispatcherOneToMany interface {
	SetSource(context.Context, *DispatcherOneToManySetSourceParams) error
	RemoveSource(context.Context) error
}

// A `Hub` that sends a given source to all the connected sinks
type DispatcherOneToMany struct {
	core.Hub
}

type DispatcherOneToMany_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	MediaPipeline core.MediaPipeline
}

func (DispatcherOneToMany_builder) GetTypeName() string {
	return "DispatcherOneToMany"
}

type DispatcherOneToManySetSourceParams struct {
	Source core.HubPort `json:"Source"`
}

func (DispatcherOneToManySetSourceParams) OperationName() string {
	return "setSource"
}

// Sets the source port that will be connected to the sinks of every `HubPort` of the dispatcher
func (elem *DispatcherOneToMany) SetSource(ctx context.Context, params *DispatcherOneToManySetSourceParams) error {
	request := kurento.BuildInvoke(elem.Id, params)

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}

type DispatcherOneToManyRemoveSourceParams struct {
}

func (DispatcherOneToManyRemoveSourceParams) OperationName() string {
	return "removeSource"
}

// Remove the source port and stop the media pipeline.
func (elem *DispatcherOneToMany) RemoveSource(ctx context.Context) error {
	request := kurento.BuildInvoke(elem.Id, &DispatcherOneToManyRemoveSourceParams{})

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}
