// Code generated by kurento-go-generator. DO NOT EDIT.

package elements

import (
	"context"
	"fmt"

	"github.com/safermobility/kurento-go-next"
	"github.com/safermobility/kurento-go-next/core"
)

type IAlphaBlending interface {
	SetMaster(source core.HubPort, zOrder int) error
	SetPortProperties(relativeX float64, relativeY float64, zOrder int, relativeWidth float64, relativeHeight float64, port core.HubPort) error
}

// A `Hub` that mixes the :rom:attr:`MediaType.AUDIO` stream of its connected sources and constructs one output with :rom:attr:`MediaType.VIDEO` streams of its connected sources into its sink
type AlphaBlending struct {
	core.Hub
}

type AlphaBlending_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	MediaPipeline core.MediaPipeline
}

func (AlphaBlending_builder) GetTypeName() string {
	return "AlphaBlending"
}

type AlphaBlendingSetMasterParams struct {
	Source core.HubPort `json:"Source"`
	ZOrder int          `json:"ZOrder"`
}

func (AlphaBlendingSetMasterParams) OperationName() string {
	return "setMaster"
}

// Sets the source port that will be the master entry to the mixer
func (elem *AlphaBlending) SetMaster(ctx context.Context, params *AlphaBlendingSetMasterParams) error {
	request := kurento.BuildInvoke(elem.Id, params)

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}

type AlphaBlendingSetPortPropertiesParams struct {
	RelativeX      float64      `json:"RelativeX"`
	RelativeY      float64      `json:"RelativeY"`
	ZOrder         int          `json:"ZOrder"`
	RelativeWidth  float64      `json:"RelativeWidth"`
	RelativeHeight float64      `json:"RelativeHeight"`
	Port           core.HubPort `json:"Port"`
}

func (AlphaBlendingSetPortPropertiesParams) OperationName() string {
	return "setPortProperties"
}

// Configure the blending mode of one port.
func (elem *AlphaBlending) SetPortProperties(ctx context.Context, params *AlphaBlendingSetPortPropertiesParams) error {
	request := kurento.BuildInvoke(elem.Id, params)

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}
