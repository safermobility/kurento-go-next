// Code generated by kurento-go-generator. DO NOT EDIT.

package elements

import (
	"context"
	"fmt"

	"github.com/safermobility/kurento-go-next/v6"
	"github.com/safermobility/kurento-go-next/v6/core"
)

type IDispatcher interface {
	Connect(source core.HubPort, sink core.HubPort) error
}

// A `Hub` that allows routing between arbitrary port pairs
type Dispatcher struct {
	core.Hub
}

type Dispatcher_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	MediaPipeline core.MediaPipeline
}

func (Dispatcher_builder) GetTypeName() string {
	return "Dispatcher"
}

type DispatcherConnectParams struct {
	Source core.HubPort `json:"Source"`
	Sink   core.HubPort `json:"Sink"`
}

func (DispatcherConnectParams) OperationName() string {
	return "connect"
}

// Connects each corresponding :rom:enum:`MediaType` of the given source port with the sink port.
func (elem *Dispatcher) Connect(ctx context.Context, params *DispatcherConnectParams) error {
	request := kurento.BuildInvoke(elem.Id, params)

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}
