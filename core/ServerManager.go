// Code generated by kurento-go-generator. DO NOT EDIT.

package core

import (
	"context"
	"fmt"

	"github.com/safermobility/kurento-go-next/v7"
)

type IServerManager interface {
	GetKmd(context.Context, *ServerManagerGetKmdParams) (string, error)
	GetCpuCount(context.Context) (int, error)
	GetUsedCpu(context.Context, *ServerManagerGetUsedCpuParams) (float64, error)
	GetUsedMemory(context.Context) (int64, error)
}

// This is a standalone object for managing the MediaServer
type ServerManager struct {
	MediaObject

	// Server information, version, modules, factories, etc
	Info *ServerInfo

	// All the pipelines available in the server
	Pipelines []IMediaPipeline

	// All active sessions in the server
	Sessions []string

	// Metadata stored in the server
	Metadata string
}

type ServerManager_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (ServerManager_builder) GetTypeName() string {
	return "ServerManager"
}

type ServerManagerGetKmdParams struct {
	ModuleName string `json:"ModuleName"`
}

func (ServerManagerGetKmdParams) OperationName() string {
	return "getKmd"
}

// Returns the kmd associated to a module
// Returns:
// // The kmd file.
func (elem *ServerManager) GetKmd(ctx context.Context, params *ServerManagerGetKmdParams) (string, error) {
	request := kurento.BuildInvoke(elem.Id, params)

	// // The kmd file.
	value, err := kurento.CallSimple[string](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type ServerManagerGetCpuCountParams struct {
}

func (ServerManagerGetCpuCountParams) OperationName() string {
	return "getCpuCount"
}

// Number of CPU cores that the media server can use.
// <p>
// Linux processes can be configured to use only a subset of the cores that are
// available in the system, via the process affinity settings
// (<strong>sched_setaffinity(2)</strong>). With this method it is possible to
// know the number of cores that the media server can use in the machine where it
// is running.
// </p>
// <p>
// For example, it's possible to limit the core affinity inside a Docker
// container by running with a command such as
// <em>docker run --cpuset-cpus='0,1'</em>.
// </p>
// <p>
// Note that the return value represents the number of
// <em>logical</em> processing units available, i.e. CPU cores including
// Hyper-Threading.
// </p>
//
// Returns:
// // Number of CPU cores available for the media server.
func (elem *ServerManager) GetCpuCount(ctx context.Context) (int, error) {
	request := kurento.BuildInvoke(elem.Id, &ServerManagerGetCpuCountParams{})

	// // Number of CPU cores available for the media server.
	value, err := kurento.CallSimple[int](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type ServerManagerGetUsedCpuParams struct {
	Interval int `json:"Interval"`
}

func (ServerManagerGetUsedCpuParams) OperationName() string {
	return "getUsedCpu"
}

// Average CPU usage of the server.
// <p>
// This method measures the average CPU usage of the media server during the
// requested interval. Normally you will want to choose an interval between 1000
// and 10000 ms.
// </p>
// <p>
// The returned value represents the global system CPU usage of the media server,
// as an average across all processing units (CPU cores).
// </p>
//
// Returns:
// // CPU usage %.
func (elem *ServerManager) GetUsedCpu(ctx context.Context, params *ServerManagerGetUsedCpuParams) (float64, error) {
	request := kurento.BuildInvoke(elem.Id, params)

	// // CPU usage %.
	value, err := kurento.CallSimple[float64](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type ServerManagerGetUsedMemoryParams struct {
}

func (ServerManagerGetUsedMemoryParams) OperationName() string {
	return "getUsedMemory"
}

// Returns the amount of memory that the server is using, in KiB
// Returns:
// // Used memory, in KiB.
func (elem *ServerManager) GetUsedMemory(ctx context.Context) (int64, error) {
	request := kurento.BuildInvoke(elem.Id, &ServerManagerGetUsedMemoryParams{})

	// // Used memory, in KiB.
	value, err := kurento.CallSimple[int64](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}
