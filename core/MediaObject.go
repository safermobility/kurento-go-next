// Code generated by kurento-go-generator. DO NOT EDIT.

package core

import (
	"context"
	"fmt"

	"github.com/safermobility/kurento-go-next/v6"
)

// Base interface used to manage capabilities common to all Kurento elements.
// <h4>Properties</h4>
// <ul>
// <li>
// <b>id</b>: unique identifier assigned to this <code>MediaObject</code> at
// instantiation time. `MediaPipeline` IDs are generated with a GUID
// followed by suffix <code>_kurento.MediaPipeline</code>.
// `MediaElement` IDs are also a GUID with suffix
// <code>_kurento.{ElementType}</code> and prefixed by parent's ID.
// <blockquote>
// <dl>
// <dt><i>MediaPipeline ID example</i></dt>
// <dd>
// <code>
// 907cac3a-809a-4bbe-a93e-ae7e944c5cae_kurento.MediaPipeline
// </code>
// </dd>
// <dt><i>MediaElement ID example</i></dt>
// <dd>
// <code>
// 907cac3a-809a-4bbe-a93e-ae7e944c5cae_kurento.MediaPipeline/403da25a-805b-4cf1-8c55-f190588e6c9b_kurento.WebRtcEndpoint
// </code>
// </dd>
// </dl>
// </blockquote>
// </li>
// <li>
// <b>name</b>: free text intended to provide a friendly name for this
// <code>MediaObject</code>. Its default value is the same as the ID.
// </li>
// <li>
// <b>tags</b>: key-value pairs intended for applications to associate metadata
// to this <code>MediaObject</code> instance.
// </li>
// </ul>
// <br />
// <br />
// <h4>Events</h4>
// <ul>
// <li>
// <strong>:rom:evt:`Error`</strong>: reports asynchronous error events. It is recommended to
// always subscribe a listener to this event, as regular error from the
// pipeline will be notified through it, instead of through an exception when
// invoking a method.
// </li>
// </ul>
type MediaObject struct {
	connection *kurento.Client

	// `MediaPipeline` to which this <code>MediaObject</code> belongs. It returns itself when invoked for a pipeline object.
	MediaPipeline IMediaPipeline

	// Parent of this <code>MediaObject</code>.
	// <p>
	// The parent of a `Hub` or a `MediaElement` is its
	// `MediaPipeline`. A `MediaPipeline` has no parent, so this
	// property will be null.
	// </p>
	//
	Parent IMediaObject

	// Unique identifier of this <code>MediaObject</code>.
	// <p>
	// It's a synthetic identifier composed by a GUID and
	// <code>MediaObject</code> type. The ID is prefixed with the parent ID when the
	// object has parent: <i>ID_parent/ID_media-object</i>.
	// </p>
	//
	Id string

	// Children of this <code>MediaObject</code>.
	Children []IMediaObject

	// This <code>MediaObject</code>'s name.
	// <p>
	// This is just sugar to simplify developers' life debugging, it is not used
	// internally for indexing nor identifying the objects. By default, it's the
	// object's ID.
	// </p>
	//
	Name string

	// Flag activating or deactivating sending the element's tags in fired events.
	SendTagsInEvents bool

	// <code>MediaObject</code> creation time in seconds since Epoch.
	CreationTime int
}

type MediaObject_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (MediaObject_builder) GetTypeName() string {
	return "MediaObject"
}

type MediaObjectAddTagParams struct {
	Key   string `json:"Key"`
	Value string `json:"Value"`
}

func (MediaObjectAddTagParams) OperationName() string {
	return "addTag"
}

// Adds a new tag to this <code>MediaObject</code>.
// If the tag is already present, it changes the value.
func (elem *MediaObject) AddTag(ctx context.Context, params *MediaObjectAddTagParams) error {
	request := kurento.BuildInvoke(elem.Id, params)

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}

type MediaObjectRemoveTagParams struct {
	Key string `json:"Key"`
}

func (MediaObjectRemoveTagParams) OperationName() string {
	return "removeTag"
}

// Removes an existing tag.
// Exists silently with no error if tag is not defined.
func (elem *MediaObject) RemoveTag(ctx context.Context, params *MediaObjectRemoveTagParams) error {
	request := kurento.BuildInvoke(elem.Id, params)

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}

type MediaObjectGetTagParams struct {
	Key string `json:"Key"`
}

func (MediaObjectGetTagParams) OperationName() string {
	return "getTag"
}

// Returns the value of given tag, or MEDIA_OBJECT_TAG_KEY_NOT_FOUND if tag is not defined.
// Returns:
// // The value associated to the given key.
func (elem *MediaObject) GetTag(ctx context.Context, params *MediaObjectGetTagParams) (string, error) {
	request := kurento.BuildInvoke(elem.Id, params)

	// // The value associated to the given key.
	value, err := kurento.CallSimple[string](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type MediaObjectGetTagsParams struct {
}

func (MediaObjectGetTagsParams) OperationName() string {
	return "getTags"
}

// Returns all tags attached to this <code>MediaObject</code>.
// Returns:
// // An array containing all key-value pairs associated with this <code>MediaObject</code>.
func (elem *MediaObject) GetTags(ctx context.Context) ([]Tag, error) {
	request := kurento.BuildInvoke(elem.Id, &MediaObjectGetTagsParams{})

	// // An array containing all key-value pairs associated with this <code>MediaObject</code>.
	value, err := kurento.CallSimple[[]Tag](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}
