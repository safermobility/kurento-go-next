// Code generated by kurento-go-generator. DO NOT EDIT.

package core

import (
	"context"
	"fmt"

	"github.com/safermobility/kurento-go-next/v6"
)

type IUriEndpoint interface {
	Pause() error
	Stop() error
}

// Interface for endpoints the require a URI to work.
// An example of this, would be a `PlayerEndpoint` whose URI property could be used to locate a file to stream.
type UriEndpoint struct {
	Endpoint

	// The uri for this endpoint.
	Uri string

	// State of the endpoint
	State *UriEndpointState
}

type UriEndpoint_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (UriEndpoint_builder) GetTypeName() string {
	return "UriEndpoint"
}

type UriEndpointPauseParams struct {
}

func (UriEndpointPauseParams) OperationName() string {
	return "pause"
}

// Pauses the feed
func (elem *UriEndpoint) Pause(ctx context.Context) error {
	request := kurento.BuildInvoke(elem.Id, &UriEndpointPauseParams{})

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}

type UriEndpointStopParams struct {
}

func (UriEndpointStopParams) OperationName() string {
	return "stop"
}

// Stops the feed
func (elem *UriEndpoint) Stop(ctx context.Context) error {
	request := kurento.BuildInvoke(elem.Id, &UriEndpointStopParams{})

	// Returns error or nil
	_, err := kurento.CallSimple[any](ctx, elem.GetConnection(), request)
	if err != nil {
		return fmt.Errorf("rpc error: %w", err)
	}
	return nil

}
