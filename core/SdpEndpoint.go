// Code generated by kurento-go-generator. DO NOT EDIT.

package core

import (
	"context"
	"fmt"

	"github.com/safermobility/kurento-go-next/v6"
)

type ISdpEndpoint interface {
	GenerateOffer(context.Context, *SdpEndpointGenerateOfferParams) (string, error)
	ProcessOffer(context.Context, *SdpEndpointProcessOfferParams) (string, error)
	ProcessAnswer(context.Context, *SdpEndpointProcessAnswerParams) (string, error)
	GetLocalSessionDescriptor(context.Context) (string, error)
	GetRemoteSessionDescriptor(context.Context) (string, error)
}

// Interface implemented by Endpoints that require an SDP Offer/Answer negotiation in order to configure a media session.
// <p>Functionality provided by this API:</p>
// <ul>
// <li>Generate SDP offers.</li>
// <li>Process SDP offers.</li>
// <li>Configure SDP related params.</li>
// </ul>
type SdpEndpoint struct {
	SessionEndpoint

	// Maximum input bitrate, signaled in SDP Offers to WebRTC and RTP senders.
	// <p>
	// This is used to put a limit on the bitrate that the remote peer will send to
	// this endpoint. The net effect of setting this parameter is that
	// <i>when Kurento generates an SDP Offer</i>, an 'Application Specific' (AS)
	// maximum bandwidth attribute will be added to the SDP media section:
	// <code>b=AS:{value}</code>.
	// </p>
	// <p>Note: This parameter has to be set before the SDP is generated.</p>
	// <ul>
	// <li>Unit: kbps (kilobits per second).</li>
	// <li>Default: 0.</li>
	// <li>0 = unlimited.</li>
	// </ul>
	//
	MaxAudioRecvBandwidth int

	// Maximum input bitrate, signaled in SDP Offers to WebRTC and RTP senders.
	// <p>
	// This is used to put a limit on the bitrate that the remote peer will send to
	// this endpoint. The net effect of setting this parameter is that
	// <i>when Kurento generates an SDP Offer</i>, an 'Application Specific' (AS)
	// maximum bandwidth attribute will be added to the SDP media section:
	// <code>b=AS:{value}</code>.
	// </p>
	// <p>Note: This parameter has to be set before the SDP is generated.</p>
	// <ul>
	// <li>Unit: kbps (kilobits per second).</li>
	// <li>Default: 0.</li>
	// <li>0 = unlimited.</li>
	// </ul>
	//
	MaxVideoRecvBandwidth int
}

type SdpEndpoint_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (SdpEndpoint_builder) GetTypeName() string {
	return "SdpEndpoint"
}

type SdpEndpointGenerateOfferParams struct {
	Options OfferOptions `json:"Options"`
}

func (SdpEndpointGenerateOfferParams) OperationName() string {
	return "generateOffer"
}

// Generates an SDP offer with media capabilities of the Endpoint.
// Throws:
// <ul>
// <li>
// SDP_END_POINT_ALREADY_NEGOTIATED If the endpoint is already negotiated.
// </li>
// <li>
// SDP_END_POINT_GENERATE_OFFER_ERROR if the generated offer is empty. This is
// most likely due to an internal error.
// </li>
// </ul>
//
// Returns:
// // The SDP offer.
func (elem *SdpEndpoint) GenerateOffer(ctx context.Context, params *SdpEndpointGenerateOfferParams) (string, error) {
	request := kurento.BuildInvoke(elem.Id, params)

	// // The SDP offer.
	value, err := kurento.CallSimple[string](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type SdpEndpointProcessOfferParams struct {
	Offer string `json:"Offer"`
}

func (SdpEndpointProcessOfferParams) OperationName() string {
	return "processOffer"
}

// Processes SDP offer of the remote peer, and generates an SDP answer based on the endpoint's capabilities.
// <p>
// If no matching capabilities are found, the SDP will contain no codecs.
// </p>
// Throws:
// <ul>
// <li>
// SDP_PARSE_ERROR If the offer is empty or has errors.
// </li>
// <li>
// SDP_END_POINT_ALREADY_NEGOTIATED If the endpoint is already negotiated.
// </li>
// <li>
// SDP_END_POINT_PROCESS_OFFER_ERROR if the generated offer is empty. This is
// most likely due to an internal error.
// </li>
// </ul>
//
// Returns:
// // The chosen configuration from the ones stated in the SDP offer.
func (elem *SdpEndpoint) ProcessOffer(ctx context.Context, params *SdpEndpointProcessOfferParams) (string, error) {
	request := kurento.BuildInvoke(elem.Id, params)

	// // The chosen configuration from the ones stated in the SDP offer.
	value, err := kurento.CallSimple[string](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type SdpEndpointProcessAnswerParams struct {
	Answer string `json:"Answer"`
}

func (SdpEndpointProcessAnswerParams) OperationName() string {
	return "processAnswer"
}

// Generates an SDP offer with media capabilities of the Endpoint.
// Throws:
// <ul>
// <li>
// SDP_PARSE_ERROR If the offer is empty or has errors.
// </li>
// <li>
// SDP_END_POINT_ALREADY_NEGOTIATED If the endpoint is already negotiated.
// </li>
// <li>
// SDP_END_POINT_PROCESS_ANSWER_ERROR if the result of processing the answer is
// an empty string. This is most likely due to an internal error.
// </li>
// <li>
// SDP_END_POINT_NOT_OFFER_GENERATED If the method is invoked before the
// generateOffer method.
// </li>
// </ul>
//
// Returns:
// // Updated SDP offer, based on the answer received.
func (elem *SdpEndpoint) ProcessAnswer(ctx context.Context, params *SdpEndpointProcessAnswerParams) (string, error) {
	request := kurento.BuildInvoke(elem.Id, params)

	// // Updated SDP offer, based on the answer received.
	value, err := kurento.CallSimple[string](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type SdpEndpointGetLocalSessionDescriptorParams struct {
}

func (SdpEndpointGetLocalSessionDescriptorParams) OperationName() string {
	return "getLocalSessionDescriptor"
}

// Returns the local SDP.
// <ul>
// <li>
// No offer has been generated: returns null.
// </li>
// <li>
// Offer has been generated: returns the SDP offer.
// </li>
// <li>
// Offer has been generated and answer processed: returns the agreed SDP.
// </li>
// </ul>
//
// Returns:
// // The last agreed SessionSpec.
func (elem *SdpEndpoint) GetLocalSessionDescriptor(ctx context.Context) (string, error) {
	request := kurento.BuildInvoke(elem.Id, &SdpEndpointGetLocalSessionDescriptorParams{})

	// // The last agreed SessionSpec.
	value, err := kurento.CallSimple[string](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}

type SdpEndpointGetRemoteSessionDescriptorParams struct {
}

func (SdpEndpointGetRemoteSessionDescriptorParams) OperationName() string {
	return "getRemoteSessionDescriptor"
}

// This method returns the remote SDP.
// If the negotiation process is not complete, it will return NULL.
//
// Returns:
// // The last agreed User Agent session description.
func (elem *SdpEndpoint) GetRemoteSessionDescriptor(ctx context.Context) (string, error) {
	request := kurento.BuildInvoke(elem.Id, &SdpEndpointGetRemoteSessionDescriptorParams{})

	// // The last agreed User Agent session description.
	value, err := kurento.CallSimple[string](ctx, elem.GetConnection(), request)
	if err != nil {
		err = fmt.Errorf("rpc error: %w", err)
	}
	return value, err

}
